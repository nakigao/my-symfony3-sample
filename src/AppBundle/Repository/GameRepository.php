<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Game;

/**
 * EgsGameExtRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends BaseRepository
{
    /**
     * @param int $pk
     *
     * @return array
     */
    public function get($pk = 0)
    {
        if (empty($pk)) {
            return array();
        }
        $game = $this->findOneBy(array(
            'id' => $pk
        ));
        if (empty($game)) {
            return array();
        }
        $game = $this->convertEntityToAssoc($game, 'id');
        $em = $this->getEntityManager();
        $egsGameRepository = $em->getRepository('AppBundle:EgsGame');
        $egsGame = $egsGameRepository->findOneBy(array(
            'id' => $game[$pk]['egsGameId']
        ));
        if (empty($egsGame)) {
            return array();
        }
        $releaseYmd = $egsGame->getReleaseYmd()->format('Y-m-d');
        $egsGame->setReleaseYmd($releaseYmd);
        $egsGame = $this->convertEntityToAssoc($egsGame);
        return $this->mergeEgsGame($game[$pk], $egsGame[$game[$pk]['egsGameId']]);
    }

    /**
     * @param array $game
     * @param array $egsGame
     *
     * @return array
     */
    public function mergeEgsGame($game = array(), $egsGame = array())
    {
        $mergedData = $game;
        $mergedData['egsGame'] = $egsGame;
        return $mergedData;
    }

    /**
     * @param int $page
     * @param int $limit
     * @param array $sortAndOrders
     * @param array $filters
     *
     * @return array
     */
    public function getList($page = 1, $limit = 0, $sortAndOrders = array(), $filters = array())
    {
        $em = $this->getEntityManager();
        $egsGameRepository = $em->getRepository('AppBundle:EgsGame');
        $egsGames = $egsGameRepository->getList($page, $limit, $sortAndOrders, $filters);
        if (empty($egsGames)) {
            return array();
        }
        // Game
        $egsGameIds = array_column($egsGames, 'id');
        $criteria = array(
            'egsGameId' => $egsGameIds,
        );
        if ($filters['isNormal'] === '') {
            // 指定なし
        } else {
            if (empty($filters['isNormal'])) {
                $criteria['isNormal'] = true;
            } else {
                // 指定なし
            }
        }
        if ($filters['isDeleted'] === '') {
            // 指定なし
        } else {
            if (empty($filters['isDeleted'])) {
                $criteria['isDeleted'] = false;
            } else {
                // 指定なし
            }
        }
        $games = $this->findBy($criteria);
        $games = $this->convertEntitiesToAssoc($games, 'egsGameId');
        // EgsGame + Game
        $list = array();
        foreach ($egsGames as $egsGame) {
            if (empty($games[$egsGame['id']])) {
                continue;
            }
            $list[] = $this->mergeEgsGame($games[$egsGame['id']], $egsGame);
        }
        return $list;
    }

    /**
     * @param array $egsGames
     *
     * @return bool
     */
    public function upsertFromEgsGame($egsGames = array())
    {
        if (empty($egsGames)) {
            return false;
        }
        $egsGamesIds = array_column($egsGames, 'id');
        $implodeEgsGameIds = implode(',', $egsGamesIds);
        $em = $this->getEntityManager();
        $dql = <<<EOM
SELECT o 
FROM {$this->_entityName} o 
WHERE o.egsGameId IN ({$implodeEgsGameIds})
EOM;
        $query = $em->createQuery($dql);
        $oldGames = $query->getArrayResult();
        if (empty($oldGames)) {
            // 全件新規登録
            $newEgsGameIds = $egsGamesIds;
        } else {
            // 一部新規登録
            $oldGameEgsGameIds = array_column($oldGames, 'egsGameId');
            $newEgsGameIds = array_diff($egsGamesIds, $oldGameEgsGameIds);
        }
        // 飛んできたデータを新規登録分だけにする
        $newRecords = array();
        foreach ($egsGames as $egsGame) {
            if (in_array($egsGame['id'], $newEgsGameIds)) {
                $newRecords[] = $egsGame;
            }
        }
        if (empty($newRecords)) {
            // 新規登録なし
            return true;
        }
        foreach ($newRecords as $record) {
            $entity = new Game();
            $entity->setEgsGameId($record['id']);
            $entity->setIsDone(false);
            $entity->setIsNormal(false);
            $entity->setIsDeleted(false);
            $em->persist($entity);
        }
        $em->flush();
        $em->clear();
        return true;
    }

    /**
     * @param int $id
     *
     * @return array
     */
    public function toggleIsDone($id = 0)
    {
        if (empty($id)) {
            return array();
        }
        $em = $this->getEntityManager();
        $game = $this->findOneBy(array('id' => $id));
        $newState = empty($game->getIsDone()) ? true : false;
        $game->setIsDone($newState);
        $em->merge($game);
        $em->flush();
        $em->clear();
        $returnValue = $this->convertEntityToAssoc($game, 'id');
        if (empty($returnValue[$game->getId()])) {
            return array();
        }
        return $returnValue[$game->getId()];
    }

    /**
     * @param int $id
     *
     * @return array
     */
    public function toggleIsNormal($id = 0)
    {
        if (empty($id)) {
            return array();
        }
        $em = $this->getEntityManager();
        $game = $this->findOneBy(array('id' => $id));
        $newState = empty($game->getIsNormal()) ? true : false;
        $game->setIsNormal($newState);
        $em->merge($game);
        $em->flush();
        $em->clear();
        $returnValue = $this->convertEntityToAssoc($game, 'id');
        if (empty($returnValue[$game->getId()])) {
            return array();
        }
        return $returnValue[$game->getId()];
    }

    /**
     * @param int $id
     *
     * @return array
     */
    public function toggleIsDeleted($id = 0)
    {
        if (empty($id)) {
            return array();
        }
        $em = $this->getEntityManager();
        $game = $this->findOneBy(array('id' => $id));
        $newState = empty($game->getIsDeleted()) ? true : false;
        $game->setIsDeleted($newState);
        $em->merge($game);
        $em->flush();
        $em->clear();
        $returnValue = $this->convertEntityToAssoc($game, 'id');
        if (empty($returnValue[$game->getId()])) {
            return array();
        }
        return $returnValue[$game->getId()];
    }

}
